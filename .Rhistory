stop("size_vector must have legth of k ")
}
}
# check randfunc
if(length(randfuncs) != k) {
stop("randfunc has not length of k")
}
for (i in randfuncs) {
if(!is.function(i)) {
stop("randfuncs holds non functions")
}
}
## special cases #############################################################
if (k == 1) {
tryCatch(
expr = {
if(size == "random") {
return(randfunc(random_sizes(1)[1]))
}
else {
return(randfunc(size[1]))
}
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
## normal routine ############################################################
random_sample_size <- size == "random"
result <- data.frame(value=NULL, sample=NULL)
sample_cat <- factor(1:k)
i <- 1
if (random_sample_size) {
size <- random(k)
}
tryCatch(
expr = {
for (rand in randfuncs) {
values <- rand(size[i])
samples <- rep(sample_cat[i])
result <- rbind(result, data.frame(value=values, sample=samples))
}
return(result)
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
ksample(2, c(rnorm, function(n) {return(rnorm(n, 0,2))}))
ksample <- function(k, randfuncs, size="random") {
## function config ###########################################################
# sample sizes
sample_s_lower_border <- 0
sample_s_upper_border <- 100
random_sizes <- function(x) {
return(as.integer(
runif(
x,
sample_s_lower_border,
sample_s_upper_border
)
)
)
}
## validate the input #######################################################
# check k
if (k < 1) {
stop("k must be at least one")
}
if (!is.numeric(k)) {
stop("k is not a number")
}
if(!is.integer(k)) {
k_int <- as.integer(k)
}
# check size
if(size != "random") {
if(!is.numeric(size)) {
stop("size must be either random or a vector of numerics")
}
else if (length(size)!= k) {
stop("size_vector must have legth of k ")
}
}
# check randfunc
if(length(randfuncs) != k) {
stop("randfunc has not length of k")
}
for (i in randfuncs) {
if(!is.function(i)) {
stop("randfuncs holds non functions")
}
}
## special cases #############################################################
if (k == 1) {
tryCatch(
expr = {
if(size == "random") {
return(randfunc(random_sizes(1)[1]))
}
else {
return(randfunc(size[1]))
}
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
## normal routine ############################################################
random_sample_size <- size == "random"
result <- data.frame(value=NULL, sample=NULL)
sample_cat <- factor(1:k)
i <- 1
if (random_sample_size) {
size <- random_sizes(k)
}
tryCatch(
expr = {
for (rand in randfuncs) {
values <- rand(size[i])
samples <- rep(sample_cat[i])
result <- rbind(result, data.frame(value=values, sample=samples))
}
return(result)
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
ksamples(2, c(rnorm, rnorm))
ksample(2, c(rnorm, rnorm))
ksample <- function(k, randfuncs, size="random") {
## function config ###########################################################
# sample sizes
sample_s_lower_border <- 0
sample_s_upper_border <- 100
random_sizes <- function(x) {
return(as.integer(
runif(
x,
sample_s_lower_border,
sample_s_upper_border
)
)
)
}
## validate the input #######################################################
# check k
if (k < 1) {
stop("k must be at least one")
}
if (!is.numeric(k)) {
stop("k is not a number")
}
if(!is.integer(k)) {
k_int <- as.integer(k)
}
# check size
if(size != "random") {
if(!is.numeric(size)) {
stop("size must be either random or a vector of numerics")
}
else if (length(size)!= k) {
stop("size_vector must have legth of k ")
}
}
# check randfunc
if(length(randfuncs) != k) {
stop("randfunc has not length of k")
}
for (i in randfuncs) {
if(!is.function(i)) {
stop("randfuncs holds non functions")
}
}
## special cases #############################################################
if (k == 1) {
tryCatch(
expr = {
if(size == "random") {
return(randfunc(random_sizes(1)[1]))
}
else {
return(randfunc(size[1]))
}
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
## normal routine ############################################################
random_sample_size <- size == "random"
result <- data.frame(value=NULL, sample=NULL)
sample_cat <- factor(1:k)
i <- 1
if (random_sample_size) {
size <- random_sizes(k)
}
tryCatch(
expr = {
for (rand in randfuncs) {
values <- rand(size[i])
samples <- rep(sample_cat[i])
result <- rbind(result, data.frame(value=values, sample=samples))
i = i+1
}
return(result)
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
ksample(2, c(rnorm, rnorm))
ksample(2, c(rnorm, rnorm), c(20,20))
a = 100
a[1]
ksample(2, c(rnorm, rnorm))
ksample <- function(k, randfuncs, size="random") {
## function config ###########################################################
# sample sizes
sample_s_lower_border <- 0
sample_s_upper_border <- 100
random_sizes <- function(x) {
return(as.integer(
runif(
x,
sample_s_lower_border,
sample_s_upper_border
)
)
)
}
## validate the input #######################################################
# check k
if (k < 1) {
stop("k must be at least one")
}
if (!is.numeric(k)) {
stop("k is not a number")
}
if(!is.integer(k)) {
k_int <- as.integer(k)
}
# check size
if(size[1] != "random") {
if(!is.numeric(size)) {
stop("size must be either random or a vector of numerics")
}
else if (length(size)!= k) {
stop("size_vector must have legth of k ")
}
}
# check randfunc
if(length(randfuncs) != k) {
stop("randfunc has not length of k")
}
for (i in randfuncs) {
if(!is.function(i)) {
stop("randfuncs holds non functions")
}
}
## special cases #############################################################
if (k == 1) {
tryCatch(
expr = {
if(size == "random") {
return(randfunc(random_sizes(1)[1]))
}
else {
return(randfunc(size[1]))
}
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
## normal routine ############################################################
random_sample_size <- size[1] != "random"
result <- data.frame(value=NULL, sample=NULL)
sample_cat <- factor(1:k)
i <- 1
if (random_sample_size) {
size <- random_sizes(k)
}
tryCatch(
expr = {
for (rand in randfuncs) {
values <- rand(size[i])
samples <- rep(sample_cat[i])
result <- rbind(result, data.frame(value=values, sample=samples))
i = i+1
}
return(result)
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
ksample(2, c(rnorm, rnorm))
ksample <- function(k, randfuncs, size="random") {
## function config ###########################################################
# sample sizes
sample_s_lower_border <- 0
sample_s_upper_border <- 100
random_sizes <- function(x) {
return(as.integer(
runif(
x,
sample_s_lower_border,
sample_s_upper_border
)
)
)
}
## validate the input #######################################################
# check k
if (k < 1) {
stop("k must be at least one")
}
if (!is.numeric(k)) {
stop("k is not a number")
}
if(!is.integer(k)) {
k_int <- as.integer(k)
}
# check size
if(size[1] != "random") {
if(!is.numeric(size)) {
stop("size must be either random or a vector of numerics")
}
else if (length(size)!= k) {
stop("size_vector must have legth of k ")
}
}
# check randfunc
if(length(randfuncs) != k) {
stop("randfunc has not length of k")
}
for (i in randfuncs) {
if(!is.function(i)) {
stop("randfuncs holds non functions")
}
}
## special cases #############################################################
if (k == 1) {
tryCatch(
expr = {
if(size == "random") {
return(randfunc(random_sizes(1)[1]))
}
else {
return(randfunc(size[1]))
}
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
## normal routine ############################################################
random_sample_size <- size == "random"
result <- data.frame(value=NULL, sample=NULL)
sample_cat <- factor(1:k)
i <- 1
if (random_sample_size) {
size <- random_sizes(k)
}
tryCatch(
expr = {
for (rand in randfuncs) {
values <- rand(size[i])
samples <- rep(sample_cat[i])
result <- rbind(result, data.frame(value=values, sample=samples))
i = i+1
}
return(result)
},
error = function(e) {
message("error:\n", e)
},
warning = function(w) {
message("warning:\n", w)
}
)
}
ksample(2, c(rnorm, rnorm))
ksample(2, c(rnorm, rnorm), c(20,20))
ksample(2, c(rnorm, rnorm))
ksample(2, c(rnorm, rnorm))
ksample(2, c(rnorm, rnorm), c(20,20))
ksample(2, c(rnorm, rnorm), c(20,20))
ksample(2, c(rnorm, rnorm))
ksample(2, c(rnorm, rnorm))
ksample(2, c(rnorm, rnorm))
ksample(3, c(rnorm, rnorm, function(n) {return(rnorm(n, 0,2))}))
sessionInfo()
RStudio.Version()
installr::updateR()
install.packages("installr")
libary("devtools")
library(devtools)
document()
load_all()
?ksamples
install.packages("stylr")
install.packages("styleer")
install.packages("styler")
library("styler")
style_dir(".\R")
style_dir(".R/")
style_dir(".R")
style_dir(path = ".R")
styler:::style_active_file()
rlang::last_error()
rlang::last_trace()
usethis::use_testthat(3)
rnorm(10)
set.seed(1)
factor(1)
a = factor(1)
a[1]
a
check()
test()
rlang::last_error()
rlang::last_trace()
devtools::test()
devtools::test()
test_dir()
test_dir()
devtools::test()
rlang::last_error()
rlang::last_trace()
devtools::test()
a = c(rnorm)
a[1](100)
a(1)
a[1]
devtools::test()
set_seed(1)
set_seed(1)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::document()
cls
check()
check()
check()
check()
devtools::document()
check()
check()
help(rnorm)
exists(a)
exists(a)
?exists
exists("a")
devtools::test()
a = c(1,2,3,4)
3 %in% a
?rnorm
library(help="stats")
?rnorm
?runif
as.integer(runif(1)*10)
as.integer(runif(1)*10)
as.integer(runif(1)*10)
as.integer(runif(1)*10)
as.integer(runif(1)*10)
as.integer(runif(1)*10)
a = c()
qfstat
